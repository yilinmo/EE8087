#+BEGIN_SRC ipython :session :exports none
import numpy as np
from numpy import log10 as log
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import rc
rc('font',**{'family':'sans-serif','sans-serif':['Arial']})
## for Palatino and other serif fonts use:
#rc('font',**{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)
import control
from control.matlab import *
from control import bode_plot as bode
from control import nyquist, margin
from numpy import convolve as conv

%load_ext tikzmagic

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
#+END_SRC

#+RESULTS:

* Ellipse
** Reflective Property of Ellipse

#+BEGIN_SRC ipython :session :file assets/ellipsesum.svg :exports results
  %%tikz -s 600,400 -f svg -S assets/ellipsesum.svg
  \draw[->] (-7,0) -- (7.5,0) node[right] {$x$};
  \draw[->] (0,-4) -- (0,4) node[above] {$y$};
  \draw[domain=0:2*pi, samples=200,smooth,variable=\t,blue,thick] plot ({5*cos(\t r)},{3*sin(\t r)});
  \draw [dashed,semithick] (6.25,-4)-- (6.25,4);
  \draw [dashed,semithick] (-6.25,-4)--(-6.25,4);

  \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (4,0) {}; 
  \fill [black] (F1) circle (2pt); 
  \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-4,0) {}; 
  \fill [black] (F2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({5*cos(45 r)},{3*sin(45 r)}) {}; 
  \fill [black] (P) circle (2pt); 

  \coordinate (a) at (-6.25,0);
  \node [inner sep=0, outer sep=0, label=180:$P_2$] (P2) at (P-|a) {}; 
  \fill [black] (P2) circle (2pt); 

  \coordinate (b) at (6.25,0);
  \node [inner sep=0, outer sep=0, label=0:$P_1$] (P1) at (P-|b) {}; 
  \fill [black] (P1) circle (2pt); 

  \draw [thick] (F1)--(P)--(F2);
  \draw [thick] (P1)--(P)--(P2);

  \node [inner sep=0, outer sep=0, label=135:$V_2$] (V2) at (-5,0) {}; 
  \fill [black] (V2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=45:$V_1$] (V1) at (5,0) {}; 
  \fill [black] (V1) circle (2pt); 
#+END_SRC

#+RESULTS:
[[file:assets/ellipsesum.svg]]
- Assuming the ellipse is given by $$\frac{x^2}{a^2}+\frac{y^2}{b^2} = 1,\,a \geq b > 0.$$
- Since $PF_1 = e PP_1$ and $PF_2 = e PP_2$, we have $$PF_1+PF_2 = e(PP_2 + PP_1) = e\times P_1P_2,$$which is a constant.
- Now if $P$ is at the vertex $V_2$, then $V_2F_2 + V_2 F_1 = V_1 F_1 + V_2 F_1 = 2a$.
- Proposition: any point $P$ on the ellipse have $$PF_1 + PF_2 = 2a.$$
 
#+BEGIN_SRC ipython :session :file assets/ellipseinandout.svg :exports results
  %%tikz -l calc -s 600,400 -f svg -S assets/ellipseinandout.svg
  \draw[->] (-7,0) -- (7.5,0) node[right] {$x$};
  \draw[->] (0,-4) -- (0,4) node[above] {$y$};
  \draw[domain=0:2*pi, samples=200,smooth,variable=\t,blue,thick] plot ({5*cos(\t r)},{3*sin(\t r)});
  \draw [dashed,semithick] (6.25,-4)-- (6.25,4);
  \draw [dashed,semithick] (-6.25,-4)--(-6.25,4);

  \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (4,0) {}; 
  \fill [black] (F1) circle (2pt); 
  \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-4,0) {}; 
  \fill [black] (F2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({5*cos(45 r)},{3*sin(45 r)}) {}; 
  \fill [black] (P) circle (2pt); 


  \node [inner sep=0, outer sep=0, label=90:$P_i$] (Pi) at ($(F2)!0.75!(P)$) {};
  \fill [black] (Pi) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P_o$] (Po) at ($(F2)!1.25!(P)$) {};
  \fill [black] (Po) circle (2pt); 

  \draw [thick] (F1)--(Po)--(F2);
  \draw [thick] (F1)--(P);
  \draw [thick] (F1)--(Pi);
#+END_SRC

#+RESULTS:
[[file:assets/ellipseinandout.svg]]
- Suppose $P_o$ is outside the ellipse.
- Then $$P_o F_1 + P_o F_2 = P_o F_1 + P_o P + PF_2 > PF_1 + PF_2 = 2a.$$
- Similarly, suppose $P_i$ is inside the ellipse.
- Then $$P_i F_1 + P_i F_2 = P_i F_1 - P_i P + PF_2 < PF_1 + PF_2 = 2a.$$
- Proposition: any point $P$ outside (inside) the ellipse have $PF_1 + PF_2 > 2a$ ($PF_1 + PF_2 < 2a$) and the converse is also true.

 #+BEGIN_SRC ipython :session :file assets/lineminsumdistance.svg :exports results
  %%tikz -l calc -s 600,400 -f svg -S assets/lineminsumdistance.svg

  \begin{scope}[rotate around={-15:(0,0)}]
    \draw  (-4,0)--(4,0);

    \node [inner sep=0, outer sep=0, label=90:$P$] (P) at (0,0) {};
    \fill [black] (P) circle (2pt); 

\draw [dashed] (0,-1)--(0,1);
    \node [inner sep=0, outer sep=0, label=90:$P'$] (PP) at (-3,0) {};
    \fill [black] (PP) circle (2pt); 
\draw [dashed] (-3,-1)--(-3,1);

    \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (-45:2) {};
    \fill [black] (F1) circle (2pt); 
    \draw  (P)--(F1);
    \draw  (PP)--(F1);

    \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-135:{2*sqrt(3)}) {};
    \fill [black] (F2) circle (2pt); 
    \draw  (P)--(F2);
    \draw  (PP)--(F2);

    \node [inner sep=0, outer sep=0, label=90:$F_1'$] (FF) at (45:2) {};
    \fill [black] (FF) circle (2pt); 
    \draw  (P)--(FF);
    \draw  (PP)--(FF);
    \draw  [dashed] (F1)--(FF);
  \end{scope}

#+END_SRC

  #+RESULTS:
  [[file:assets/lineminsumdistance.svg]]


- Suppose we have a line $L$ and two point $F_1$ and $F_2$ on the same side of the line
- Our goal is to find a point $P$ on the line, such that the distance $PF_1+PF_2$ is minimized
- We can find the reflection of point $F_1$ to be $F_1'$.
- For any point $P$ on the line, $PF_1 = PF_1'$.
- Therefore, the distance is minimized if $F_2$, $P$ and $F_1'$ are *collinear*.
- Or when the normal vector bisects $\angle F_2PF_1$.
 
#+BEGIN_SRC ipython :session :file assets/ellipsereflection.svg :exports results
  %%tikz -l calc -s 600,400 -f svg -S assets/ellipsereflection.svg
  \draw[->] (-7,0) -- (7.5,0) node[right] {$x$};
  \draw[->] (0,-4) -- (0,4) node[above] {$y$};
  \draw[domain=0:2*pi, samples=200,smooth,variable=\t,blue,thick] plot ({5*cos(\t r)},{3*sin(\t r)});
  \draw [dashed,semithick] (6.25,-4)-- (6.25,4);
  \draw [dashed,semithick] (-6.25,-4)--(-6.25,4);

  \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (4,0) {}; 
  \fill [black] (F1) circle (2pt); 
  \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-4,0) {}; 
  \fill [black] (F2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({5*cos(45 )},{3*sin(45 )}) {}; 
  \fill [black] (P) circle (2pt); 

  \draw [thick] (F1)--(P)--(F2);

  \coordinate (a) at (0,{3*sqrt(2)});
  \coordinate (b) at ({5*sqrt(2)},0);
  \draw [semithick] ($(a)!0.15!(b)$)--($(a)!0.85!(b)$);

  \node [inner sep=0, outer sep=0, label=270:$C$] (c) at ({1.6*sqrt(2)},0) {}; 
  \fill [black] (c) circle (2pt); 
  \draw [semithick,dashed] (c)--($(c)!1.25!(P)$);
#+END_SRC

#+RESULTS:
[[file:assets/ellipsereflection.svg]]


- For any point $P$ on the ellipse, find $CP$ that bisects the angle $\angle F_2 PF_1$.
- Draw a line $L$ through $P$ that is perpendicular to $CP$.
- For any point $P'\neq P$ on $L$, $P'F_1 + P'F_2 > PF_1 + PF_2 = 2a$.
- Therefore, the line $L$ only intersects the ellipsoid on one point $P$.
- Line $L$ is the tangent line and $CP$ is the normal vector.
- Proposition: The normal vector at point $P$ bisects $\angle F_2PF_1$.

- The tangent line of an ellipse at point $P =(x_0,y_0)$ is $$\frac{x_0}{a^2}x + \frac{y_0}{b^2}y = 1$$
*** Shockwave Lithotripsy
http://1technation.com/wp-content/uploads/2014/08/biomed-101-aug.jpg
http://blogs.nejm.org/now/wp-content/uploads/2012/07/Electrohydraulic-Lithotripter.jpg
- We can use elliptical reflectors to concentrate all the energy to the kidney stone.
*** Whispering Gallery
http://poetinthecity.co.uk/undertheskin/wp-content/uploads/2016/11/Whispering_Gallery2.jpg
*** Elliptical Billiard Table

https://www.wired.com/wp-content/uploads/2015/11/ap-wrongtheory-pooltable-annot.jpg

http://www.math.cornell.edu/~mec/Summer2009/Remus/Images/ellipse1.gif

- What if we start at position that is not the focus?

*** Infinite Bounces on a Circular Billiard Table
#+BEGIN_SRC ipython :session :file assets/circularbilliad.svg :exports results
  %%tikz -l calc -p tkz-euclide -s 400,400 -f svg -S assets/circularbilliad.svg

\tkzPoint (0,0){O}
\tkzPoint (5,0){P}
\tkzPoint (-1,3){A}
\tkzPoint (-1,-3){B}

\tkzPoint (1,2){a}
\tkzPoint (1,-2){b}

\tkzDrawCircle(O,P)
\tkzDrawPoints(O,P,A)
\tkzLabelPoints(O,P)

\draw [dashed,semithick](O) -- ($(A)!(O)!(P)$);
\draw [dashed,semithick](O) -- ($(B)!(O)!(P)$);
\draw [dashed,semithick](O) -- (P);

\draw [semithick](A)--(P);
\draw [semithick](P)--(B);
#+END_SRC

#+RESULTS:
[[file:assets/circularbilliad.svg]]

- Suppose we have a circular table, the ball first starts at $A$ and bounces at $P$ and reach $B$.
- The distance from $O$ to $AP$ is the same as the distance from $O$ to $BP$.
- Any point on the trajectory is at least $Oa$ distance away from $O$.
- In other words, the trajectory cannot go inside a circle with radius $Oa$ centered at $O$.

http://www.math.cornell.edu/~mec/Summer2009/Remus/Images/billiard.bmp

*** Infinite Bounces on an Elliptical Billiard Table
#+BEGIN_SRC ipython :session :file assets/ellipsebounce.svg :exports results
    %%tikz -l calc -s 600,400 -f svg -S assets/ellipsebounce.svg
    \draw[domain=0:2*pi, samples=200,smooth,variable=\t,black,thick] plot ({5*cos(\t r)},{4*sin(\t r)});

    \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (3,0) {}; 
    \fill [black] (F1) circle (2pt); 
    \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-3,0) {}; 
    \fill [black] (F2) circle (2pt); 

    \node [inner sep=0, outer sep=0, label=45:$P$] (P) at (0,4) {}; 
    \fill [black] (P) circle (2pt); 

   \coordinate (c) at (0,0); 
    \draw [semithick,dashed] (c)--($(c)!1.25!(P)$);

   \coordinate (A) at (4,0); 

   \coordinate (B) at (-4,0); 
    \node [inner sep=0, outer sep=0, label=270:$A$]  at (A) {}; 
    \node [inner sep=0, outer sep=0, label=270:$B$] at (B) {}; 

    \draw [semithick] (A)--(P)--(B);

   \node [inner sep=0, outer sep=0, label=270:$F_1'$] (FF1) at ($({atan(-0.75)}:5)+(P)$) {}; 
    \fill [black] (FF1) circle (2pt); 
  
   \node [inner sep=0, outer sep=0, label=270:$F_2'$] (FF2) at ($({-180-atan(-0.75)}:5)+(P)$) {}; 
    \fill [black] (FF2) circle (2pt); 

  \draw [dashed] (F1)--(FF1);
  \draw [dashed] (F2)--(FF2);

  \draw [blue] (F1)--(P)--(FF2)--(F1);
  \draw [red] (FF1)--(P)--(F2)--(FF1);
#+END_SRC

#+RESULTS:
[[file:assets/ellipsebounce.svg]]

- Suppose the table is elliptical with foci $F_1$ and $F_2$
- The ball first starts at $A$ and bounces at $P$ and reach $B$.
- Denote the reflection of $F_1$ ($F_2$) with respect to $AP$ ($BP$) to be $F_1'$ ($F_2'$)
- For any point $P'$ on $AP$, $P'F_1+P'F_2 \geq F_1'F_2$.
- For any point $P'$ on $BP$, $P'F_1+P'F_2 \geq F_1F_2' = F_1'F_2$.
- Therefore, any point $P'$ on the trajectory will have $P'F_1+P'F_2  \geq F_1'F_2$.
- The trajectory cannot enter an ellipse with foci $F_1$ and $F_2$ and major axis of length $F_1'F_2$.

http://www.math.cornell.edu/~mec/Summer2009/Remus/Images/elliptic2.bmp

** Drawing ellipses
*** Pin and String Method
https://upload.wikimedia.org/wikipedia/commons/e/e4/Elliko-g.svg
*** [[https://www.desmos.com/calculator/9e4ecylnix][Paper strip method]]
#+BEGIN_SRC ipython :session :file assets/ellipsepaperstrip.svg :exports results
    %%tikz -l calc -s 600,600 -f svg -S assets/ellipsepaperstrip.svg
  \draw[->] (0,0) -- (6,0) node[right] {$x$};
  \draw[->] (0,0) -- (0,6) node[above] {$y$};

  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({5*cos(45 )},{3*sin(45 )}) {}; 
  \fill [black] (P) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=180:$A$] (a) at (0,{4*sqrt(2)}) {}; 
  \fill [black] (a) circle (2pt); 
  \node [inner sep=0, outer sep=0, label=270:$B$] (b) at ({4*sqrt(2)},0) {}; 
  \fill [black] (b) circle (2pt); 

  \draw [semithick] (a)--(b);
  \coordinate (o) at (0,0);

  \draw [dashed] (P)-|(o);
  \draw [dashed] (o)-|(P);
  \draw (5,0) arc(180:135:0.657) node [midway,anchor=0] {$\theta$};
   #+END_SRC

   #+RESULTS:
   [[file:assets/ellipsepaperstrip.svg]]
- We start with a strip of paper of length $a+b$.
- Find point $P$ on the strip such that $AP = a$ and $PB = b$.
- Move the strip such that $A$ is on the \(y\)-axis and $B$ is on the \(x\)-axis.
- Suppose the angle of the strip is $\theta$, then $P$ has a *parametric representation*: $$P = (a\cos\theta,b\sin\theta).$$
- Therefore $P$ is on the ellipse $$\frac{x^2}{a^2}+\frac{y^2}{b^2}=1.$$

*** [[https://www.desmos.com/calculator/migbf6mccc][Steiner Generation]]
https://upload.wikimedia.org/wikipedia/commons/9/94/Ellipse-steiner-e.svg
- Create a rectangle, with $A = (-a,2b)$ and $B = (a,2b)$.
- Find a point $A' = (1-t)B+tA$ on line $AB$.
- Find a point $B' = (1-t)V_1+tB$ on line $V_1B$.
- The intersection of the line $A'V_1$ and $B'V_2$ will be on the ellipse $$\frac{x^2}{a^2}+\frac{y^2}{b^2}=1.$$
- If $b = a$, then $A'V_1$ is perpendicular to $B'V_2$. The trajectory of $P$ will be a circle $$x^2+y^2 = a^2.$$
- We can scale the \(y\)-axis by $b/a$ and get the ellipse.
- An ellipse is an affine image of a circle.
- Corollary: The area of an ellipse is $\pi ab$.
** Modern Portfolio Theory
- Modern portfolio theory (MPT) is a mathematical framework for assembling a portfolio of assets such that the expected return is maximized for a given level of risk.
- Economist Harry Markowitz introduced MPT in a 1952 essay, for which he was later awarded a Nobel Prize in economics.
- Suppose we can buy 2 stocks:
  - The average return for each stock is $R_i$.
  - The risk (standard deviation) for each stock is $\sigma_i$
  - The correlation between the two stocks is $\rho$. 
- Suppose we buy $w_1$ shares of stock 1 and $w_2$ shares of stock 2.
- The expected return is $w_1 R_1 + w_2 R_2$.
- The risk is $$\sqrt{w_1^2 \sigma_1^2+w_2^2\sigma_2^2 + w_1w_2 \sigma_1\sigma_2\rho}.$$
- Assuming $\rho = 0$, and we want to take a maximum risk of $\sigma_p$, then $(w_1,w_2)$ will be on an ellipsoid $$\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1,$$with $a^2 = \sigma_p^2/\sigma_1^2$ and $b^2 = \sigma_p^2/\sigma_2^2$.
- The tangent line of the ellipse at $(x_0,y_0)$ has the form $$\frac{x_0}{a^2}x+\frac{y_0}{b^2}y = 1.$$
- Therefore, we have the optimal portfolio must satisfies $$\frac{w_1}{a^2}:\frac{w_2}{b^2}=R_1:R_2.$$
- We can solve $$w_1 = \frac{R_1a^2}{\sqrt{R_1^2a^2+R_2^2b^2}},\,w_2=\frac{R_2b^2}{\sqrt{R_1^2a^2+R_2^2b^2}}.$$
#+BEGIN_SRC ipython :session :file assets/portfolio.svg :exports results
  %%tikz -l calc -s 600,400 -f svg -S assets/portfolio.svg
  \draw[->] (-6,0) -- (6,0) node[right] {$w_1$};
  \draw[->] (0,-4) -- (0,4) node[above] {$w_2$};
  \draw[domain=0:2*pi, samples=200,smooth,variable=\t,blue,thick] plot ({5*cos(\t r)},{3*sin(\t r)});


  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({5*cos(45 )},{3*sin(45 )}) {}; 
  \fill [black] (P) circle (2pt); 

 \foreach \t in {-2.4,-1.8,-1.2,-0.6,0} {
  \draw [semithick] ($({\t},{3*sqrt(2)+\t})!0.15!({5*sqrt(2)+\t},{\t})$)--($({\t},{3*sqrt(2)+\t})!0.85!({5*sqrt(2)+\t},{\t})$);
  }
#+END_SRC

#+RESULTS:
[[file:assets/portfolio.svg]]



* Hyperbola
** Reflective Properties
#+BEGIN_SRC ipython :session :file assets/hyperbolaminus.svg :exports results
  %%tikz -s 600,400 -f svg -S assets/hyperbolaminus.svg
  \draw[->] (-6,0) -- (6,0) node[right] {$x$};
  \draw[->] (0,-5) -- (0,5) node[above] {$y$};
  \draw[domain=-1:1, samples=200,smooth,variable=\t,blue,thick] plot ({3*cosh(\t)},{4*sinh(\t)});
  \draw[domain=-1:1, samples=200,smooth,variable=\t,blue,thick] plot ({-3*cosh(\t)},{4*sinh(\t)});
  \draw [dashed,semithick,red] (-1.8,-4)-- (-1.8,4);
  \draw [dashed,semithick,red] (1.8,-4)-- (1.8,4);

  \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (5,0) {}; 
  \fill [black] (F1) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=135:$V_1$] (V1) at (3,0) {}; 
  \fill [black] (V1) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-5,0) {}; 
  \fill [black] (F2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=-45:$V_2$] (V2) at (-3,0) {}; 
  \fill [black] (V2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({3*cosh(0.5)},{4*sinh(0.5)}) {}; 
  \fill [black] (P) circle (2pt); 

  \coordinate (a) at (-1.8,0);
  \node [inner sep=0, outer sep=0, label=180:$P_2$] (P2) at (P-|a) {}; 
  \fill [black] (P2) circle (2pt); 

  \coordinate (b) at (1.8,0);
  \node [inner sep=0, outer sep=0, label=45:$P_1$] (P1) at (P-|b) {}; 
  \fill [black] (P1) circle (2pt); 

  \draw [thick] (F1)--(P)--(F2);
  \draw [thick] (P1)--(P)--(P2);
#+END_SRC

#+RESULTS:
[[file:assets/hyperbolaminus.svg]]
- Assuming the hyperbola is given by $$\frac{x^2}{a^2}-\frac{y^2}{b^2} = 1,\,a, b > 0.$$
- Suppose $P$ is on the left branch of the hyperbola.
- Since $PF_1 = e PP_1$ and $PF_2 = e PP_2$, we have $$PF_2-PF_1 = e(PP_2 - PP_1) = e\times P_2P_1,$$which is a constant.
- Now if $P$ is at the vertex $V_1$, then $V_1F_2 - V_1 F_1 = V_1 F_2 - V_2 F_2 = V_1V_2 = 2a$.
- If the $P$ is on the right branch of the hyperbola, then $$PF_2-PF_1 =  -2a.$$
- Proposition: any point $P$ on the ellipse have $$|PF_1-PF_2|= 2a.$$
 
#+BEGIN_SRC ipython :session :file assets/hyperbolainandout.svg :exports results
  %%tikz -l calc -s 600,400 -f svg -S assets/hyperbolainandout.svg

  \draw[->] (-6,0) -- (6,0) node[right] {$x$};
  \draw[->] (0,-5) -- (0,5) node[above] {$y$};
  \draw[domain=-1:1, samples=200,smooth,variable=\t,blue,thick] plot ({3*cosh(\t)},{4*sinh(\t)});
  \draw[domain=-1:1, samples=200,smooth,variable=\t,blue,thick] plot ({-3*cosh(\t)},{4*sinh(\t)});

  \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (5,0) {}; 
  \fill [black] (F1) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (-5,0) {}; 
  \fill [black] (F2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P$] (P) at ({3*cosh(0.5)},{4*sinh(0.5)}) {}; 
  \fill [black] (P) circle (2pt); 

  \draw [thick] (F1)--(P)--(F2);
  
  \node [inner sep=0, outer sep=0, label=90:$P_i$] (Pi) at ($(F2)!0.75!(P)$) {};
  \fill [black] (Pi) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=90:$P_o$] (Po) at ($(F2)!1.25!(P)$) {};
  \fill [black] (Po) circle (2pt); 

  \draw [thick] (F1)--(Po)--(F2);
  \draw [thick] (F1)--(P);
  \draw [thick] (F1)--(Pi);
#+END_SRC

#+RESULTS:
[[file:assets/hyperbolainandout.svg]]
- Suppose $P_o$ is on the left of the hyperbola.
- Then $$P_o F_2 - P_o F_1 = P F_2 + P_o P - P_oF_1 > PF_2 - PF_1 = 2a.$$
- Similarly, suppose $P_i$ is inside the ellipse.
- Then $$P_i F_2 - P_i F_1 = P F_2 - P_i P - P_iF_1 < PF_2 - PF_2 = 2a.$$
- Proposition: any point $P$ outside (between the two branches of) the ellipse have $|PF_2 - PF_1| > 2a$ ($|PF_2 - PF_1| < 2a$) and the converse is also true.


#+BEGIN_SRC ipython :session :file assets/hyperbolareflection.svg :exports results
  %%tikz -l calc -p tkz-euclide -s 600,400 -f svg -S assets/hyperbolareflection.svg
  \tkzInit[xmax=6, xmin=-6, ymin=-4, ymax=6]
  \tkzDrawX\tkzDrawY 
  \tkzClip
  \draw[domain=-0.8:1.2, samples=200,smooth,variable=\t,blue,thick] plot ({3*cosh(\t)},{4*sinh(\t)});
  \draw[domain=-0.8:1.2, samples=200,smooth,variable=\t,blue,thick] plot ({-3*cosh(\t)},{4*sinh(\t)});

  \tkzPoint (5,0){f}
  \tkzPoint (-5,0){F}
  \tkzPoint (5,{16/3}){P}
  \tkzInterLC(F,P)(P,f) \tkzGetFirstPoint{G}

\tkzDefMidPoint(G,f) \tkzGetPoint{D}
\tkzDefMidPoint(P,D) \tkzGetPoint{H}

  \tkzDrawSegments(F,P f,P H,f G,H F,H)
  \tkzDrawSegments[dashed](f,G)
  \tkzDrawLine(P,D)
  \tkzDrawPoints(F,f,P,G,H)
  \tkzLabelPoints(F,f,P,G,H)
#+END_SRC

#+RESULTS:
[[file:assets/hyperbolareflection.svg]]


- For any point $P$ on the left branch of the hyperbola, find a line $L$ that bisects the angle $\angle F Pf$.
- Find the reflection of focus $f$ with respect to $L$ as $G$. $G$ is on $FP$.
- Therefore, $Pf = PG$ and $FG = PF - PG = 2a$.
- For any point $H\neq P$ on $L$, \(Hf = HG.\)
- In $\triangle FHG$, we have $  HF - Hf =HF-HG  < FG = 2a$.
- Therefore, the line $L$ only intersects the hyperbola on one point $P$.
- Line $L$ is the tangent line.
- Proposition: The tangent line at point $P$ bisects $\angle FPf$.
- Corollary: The normal vector at point $P$ bisects the exterior angle of $\angle FPf$
- The tangent line of a hyperbola at point $P =(x_0,y_0)$ is $$\frac{x_0}{a^2}x - \frac{y_0}{b^2}y = 1$$

*** Cassegrain reflector
https://upload.wikimedia.org/wikipedia/en/2/2c/Cassegrain.en.png

** Multilateration
- Hyperbolic paths occur in the LORAN (long range navigation) radio navigation system
- Suppose we have 3 base station $F_1, F_2$ and $F_3$, which transmit a radio signal at the same time.
- If we receive the signals from $F_1$, $F_2$ and $F_3$ at time $t_1 < t_2 < t_3$, we know that $$PF_2 - PF_1 = (t_2-t_1)C,\,PF_3 - PF_2 = (t_3 -t_2)C,$$ where $P$ is our position and $C$ is the speed of light.
- Therefore, $P$ is on two hyperbola. There maybe either $1$ or $2$ intersections of the hyperbola.
- With the fourth base station $F_4$, we can localize $P$ exactly.

#+BEGIN_SRC ipython :session :file assets/multilateration.svg :exports results
  %%tikz -l intersections -s 600,400 -f svg -S assets/multilateration.svg

  \node [inner sep=0, outer sep=0, label=270:$F_1$] (F1) at (-2.5,0) {}; 
  \fill [black] (F1) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=270:$F_2$] (F2) at (2.5,0) {}; 
  \fill [black] (F2) circle (2pt); 

  \node [inner sep=0, outer sep=0, label=270:$F_3$] (F3) at (2.5,6.5) {}; 
  \fill [black] (F3) circle (2pt); 

  \draw[name path=line 1, domain=-1.5:1, samples=200,smooth,variable=\t,blue,thick] plot ({3*sinh(\t)+2.5},{-1.25*cosh(\t)+3.25});

  \draw[domain=-1:1, samples=200,smooth,variable=\t,blue,dashed] plot ({3*sinh(\t)+2.5},{1.25*cosh(\t)+3.25});

  \draw[name path=line 2, domain=-1:1, samples=200,smooth,variable=\t,blue,thick] plot ({-2*cosh(\t)},{1.5*sinh(\t)});

  \draw[domain=-1:1.5, samples=200,smooth,variable=\t,blue,dashed] plot ({2*cosh(\t)},{1.5*sinh(\t)});

\fill[black,name intersections={of=line 1 and line 2}]
    {(intersection-1) circle (2pt) node [above] {$P$}};

\draw (intersection-1)--(F1);
\draw (intersection-1)--(F2);
\draw (intersection-1)--(F3);
#+END_SRC

#+RESULTS:
[[file:assets/multilateration.svg]]


**  Hyperboloid Structure

The world's first hyperboloid structure is a 37-meter water tower built by Vladimir Shukhov in Russia at 1896
https://upload.wikimedia.org/wikipedia/commons/a/a1/First_Shukhov_Tower_Nizhny_Novgorod_1896.jpg
*** Cooling Tower
https://www.scienceabc.com/wp-content/uploads/2015/12/cooling-tower.jpg

*** Hyperboloid Tower in Kobe, Japan
https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/Kobe_port_tower11s3200.jpg/685px-Kobe_port_tower11s3200.jpg

*** Hyperboloid
- Hyperboloid (of one sheet) can be generated by rotating a hyperbola around its minor axis.
https://upload.wikimedia.org/wikipedia/commons/4/46/Hyperboloid1.png
- The hyperbolid satisfies the following equation $$\frac{x^2+y^2}{a^2}-\frac{z^2}{b^2}=1.$$

*** Straight Rod Passing through Curved Hole

#+BEGIN_EXPORT HTML
<iframe width="560" height="315" src="https://www.youtube.com/embed/IXQ1ZWBhnBk" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
#+END_EXPORT

*** Building a Hyperboloid using Straight Sticks
#+BEGIN_EXPORT HTML
<iframe width="560" height="315" src="https://www.youtube.com/embed/EigzNppsQp8" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
#+END_EXPORT


** Planetary orbits
*** Kepler's Laws of Planetary Motion
- *First Law*: The orbit of a planet is an ellipse with the Sun at one of the two foci.
- *Second Law*: A line segment joining a planet and the Sun sweeps out equal areas during equal intervals of time.
- *Third Law*: The square of the orbital period of a planet is proportional to the cube of the semi-major axis of its orbit.
- This can be proved using Newton's law of motion and law of universal gravitation, with the addtional assumption that the mass of the planet is negligible comparing to the mass of the sun

https://upload.wikimedia.org/wikipedia/commons/9/98/Kepler_laws_diagram.svg

- For comets, it is possible that they follow a parabolic or hyperbolic curve if its potential energy and kinetic energy is high enough to escape.
- The sun will still be at one focus.
- The second law also holds.
- However, the comet will never return back to us.

https://upload.wikimedia.org/wikipedia/commons/8/89/OrbitalEccentricityDemo.svg
